//
// Generated file, do not edit! Created by nedtool 4.6 from messages/HF_ReportIn.msg.
//

#ifndef _HF_REPORTIN_M_H_
#define _HF_REPORTIN_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include <EtherFrame_m.h>
    #include "Switch_Info.h"    
    typedef std::list<Switch_Info *> SwitchInfoList;
// }}

/**
 * Class generated from <tt>messages/HF_ReportIn.msg:15</tt> by nedtool.
 * <pre>
 * // When packets are received by the data plane and sent to the connected controller,
 * // the OFP_PACKET_IN messages are used. If the complete packet needs to be sent to the controller, because it can not be
 * // stored in the bufer, it is encapsulated in the packet-in message.
 * packet HF_ReportIn
 * {
 *     string controllerId;
 *     SwitchInfoList switchInfoList;
 * }
 * </pre>
 */
class HF_ReportIn : public ::cPacket
{
  protected:
    opp_string controllerId_var;
    SwitchInfoList switchInfoList_var;

  private:
    void copy(const HF_ReportIn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HF_ReportIn&);

  public:
    HF_ReportIn(const char *name=NULL, int kind=0);
    HF_ReportIn(const HF_ReportIn& other);
    virtual ~HF_ReportIn();
    HF_ReportIn& operator=(const HF_ReportIn& other);
    virtual HF_ReportIn *dup() const {return new HF_ReportIn(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getControllerId() const;
    virtual void setControllerId(const char * controllerId);
    virtual SwitchInfoList& getSwitchInfoList();
    virtual const SwitchInfoList& getSwitchInfoList() const {return const_cast<HF_ReportIn*>(this)->getSwitchInfoList();}
    virtual void setSwitchInfoList(const SwitchInfoList& switchInfoList);
};

inline void doPacking(cCommBuffer *b, HF_ReportIn& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, HF_ReportIn& obj) {obj.parsimUnpack(b);}


#endif // ifndef _HF_REPORTIN_M_H_

