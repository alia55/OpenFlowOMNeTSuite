//
// Generated file, do not edit! Created by nedtool 4.6 from messages/Open_Flow_Message.msg.
//

#ifndef _OPEN_FLOW_MESSAGE_M_H_
#define _OPEN_FLOW_MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "openflow.h"
// }}

/**
 * Class generated from <tt>messages/Open_Flow_Message.msg:11</tt> by nedtool.
 * <pre>
 * // base class for all OpenFlow protocol messages; only contains the OpenFlow header
 * packet Open_Flow_Message
 * {
 *     ofp_header header;
 * 
 * }
 * </pre>
 */
class Open_Flow_Message : public ::cPacket
{
  protected:
    ofp_header header_var;

  private:
    void copy(const Open_Flow_Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Open_Flow_Message&);

  public:
    Open_Flow_Message(const char *name=NULL, int kind=0);
    Open_Flow_Message(const Open_Flow_Message& other);
    virtual ~Open_Flow_Message();
    Open_Flow_Message& operator=(const Open_Flow_Message& other);
    virtual Open_Flow_Message *dup() const {return new Open_Flow_Message(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual ofp_header& getHeader();
    virtual const ofp_header& getHeader() const {return const_cast<Open_Flow_Message*>(this)->getHeader();}
    virtual void setHeader(const ofp_header& header);
};

inline void doPacking(cCommBuffer *b, Open_Flow_Message& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Open_Flow_Message& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OPEN_FLOW_MESSAGE_M_H_

